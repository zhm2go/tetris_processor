module regfile(
	clock, ctrl_writeEnable, ctrl_reset, ctrl_writeReg,
	ctrl_readRegA, ctrl_readRegB, data_writeReg, data_readRegA,
	data_readRegB
);

   input clock, ctrl_writeEnable, ctrl_reset;
   input [4:0] ctrl_writeReg, ctrl_readRegA, ctrl_readRegB;
   input [31:0] data_writeReg;

   output [31:0] data_readRegA, data_readRegB;
	
	wire [31:0] q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10,
					  q11, q12, q13, q14, q15, q16, q17, q18, q19, q20,
					  q21, q22, q23, q24, q25, q26, q27, q28, q29, q30, 
					  q31, q32, en;
					
	wire [31:0] w_decode;
	decode_32 decode_write(w_decode, ctrl_writeReg);
	
	genvar i;
	generate
		for(i = 0; i < 32; i = i + 1) 
		begin: write_en_loop
			and(en[i], ctrl_writeEnable, w_decode[i]);
		end
	endgenerate
	
	dffe32 dffe_00(q0, data_writeReg, clock, en[0], ctrl_reset);
	dffe32 dffe_01(q1, data_writeReg, clock, en[1], ctrl_reset);
	dffe32 dffe_02(q2, data_writeReg, clock, en[2], ctrl_reset);
	dffe32 dffe_03(q3, data_writeReg, clock, en[3], ctrl_reset);
	dffe32 dffe_04(q4, data_writeReg, clock, en[4], ctrl_reset);
	dffe32 dffe_05(q5, data_writeReg, clock, en[5], ctrl_reset);
	dffe32 dffe_06(q6, data_writeReg, clock, en[6], ctrl_reset);
	dffe32 dffe_07(q7, data_writeReg, clock, en[7], ctrl_reset);
	dffe32 dffe_08(q8, data_writeReg, clock, en[8], ctrl_reset);
	dffe32 dffe_09(q9, data_writeReg, clock, en[9], ctrl_reset);
	dffe32 dffe_10(q10, data_writeReg, clock, en[10], ctrl_reset);
	dffe32 dffe_11(q11, data_writeReg, clock, en[11], ctrl_reset);
	dffe32 dffe_12(q12, data_writeReg, clock, en[12], ctrl_reset);
	dffe32 dffe_13(q13, data_writeReg, clock, en[13], ctrl_reset);
	dffe32 dffe_14(q14, data_writeReg, clock, en[14], ctrl_reset);
	dffe32 dffe_15(q15, data_writeReg, clock, en[15], ctrl_reset);
	dffe32 dffe_16(q16, data_writeReg, clock, en[16], ctrl_reset);
	dffe32 dffe_17(q17, data_writeReg, clock, en[17], ctrl_reset);
	dffe32 dffe_18(q18, data_writeReg, clock, en[18], ctrl_reset);
	dffe32 dffe_19(q19, data_writeReg, clock, en[19], ctrl_reset);
	dffe32 dffe_20(q20, data_writeReg, clock, en[20], ctrl_reset);
	dffe32 dffe_21(q21, data_writeReg, clock, en[21], ctrl_reset);
	dffe32 dffe_22(q22, data_writeReg, clock, en[22], ctrl_reset);
	dffe32 dffe_23(q23, data_writeReg, clock, en[23], ctrl_reset);
	dffe32 dffe_24(q24, data_writeReg, clock, en[24], ctrl_reset);
	dffe32 dffe_25(q25, data_writeReg, clock, en[25], ctrl_reset);
	dffe32 dffe_26(q26, data_writeReg, clock, en[26], ctrl_reset);
	dffe32 dffe_27(q27, data_writeReg, clock, en[27], ctrl_reset);
	dffe32 dffe_28(q28, data_writeReg, clock, en[28], ctrl_reset);
	dffe32 dffe_29(q29, data_writeReg, clock, en[29], ctrl_reset);
	dffe32 dffe_30(q30, data_writeReg, clock, en[30], ctrl_reset);
	dffe32 dffe_31(q31, data_writeReg, clock, en[31], ctrl_reset);
	
	wire [31:0] a_decode, b_decode;
	decode_32 decode_a(a_decode, ctrl_readRegA);
	decode_32 decode_b(b_decode, ctrl_readRegB);
	
	tri [31:0] busa;
	assign busa = a_decode[0] ? 32'h00000000 : 32'hzzzzzzzz;
	assign busa = a_decode[1] ? q1 : 32'hzzzzzzzz;
	assign busa = a_decode[2] ? q2 : 32'hzzzzzzzz;
	assign busa = a_decode[3] ? q3 : 32'hzzzzzzzz;
	assign busa = a_decode[4] ? q4 : 32'hzzzzzzzz;
	assign busa = a_decode[5] ? q5 : 32'hzzzzzzzz;
	assign busa = a_decode[6] ? q6 : 32'hzzzzzzzz;
	assign busa = a_decode[7] ? q7 : 32'hzzzzzzzz;
	assign busa = a_decode[8] ? q8 : 32'hzzzzzzzz;
	assign busa = a_decode[9] ? q9 : 32'hzzzzzzzz;
	assign busa = a_decode[10] ? q10 : 32'hzzzzzzzz;
	assign busa = a_decode[11] ? q11 : 32'hzzzzzzzz;
	assign busa = a_decode[12] ? q12 : 32'hzzzzzzzz;
	assign busa = a_decode[13] ? q13 : 32'hzzzzzzzz;
	assign busa = a_decode[14] ? q14 : 32'hzzzzzzzz;
	assign busa = a_decode[15] ? q15 : 32'hzzzzzzzz;
	assign busa = a_decode[16] ? q16 : 32'hzzzzzzzz;
	assign busa = a_decode[17] ? q17 : 32'hzzzzzzzz;
	assign busa = a_decode[18] ? q18 : 32'hzzzzzzzz;
	assign busa = a_decode[19] ? q19 : 32'hzzzzzzzz;
	assign busa = a_decode[20] ? q20 : 32'hzzzzzzzz;
	assign busa = a_decode[21] ? q21 : 32'hzzzzzzzz;
	assign busa = a_decode[22] ? q22 : 32'hzzzzzzzz;
	assign busa = a_decode[23] ? q23 : 32'hzzzzzzzz;
	assign busa = a_decode[24] ? q24 : 32'hzzzzzzzz;
	assign busa = a_decode[25] ? q25 : 32'hzzzzzzzz;
	assign busa = a_decode[26] ? q26 : 32'hzzzzzzzz;
	assign busa = a_decode[27] ? q27 : 32'hzzzzzzzz;
	assign busa = a_decode[28] ? q28 : 32'hzzzzzzzz;
	assign busa = a_decode[29] ? q29 : 32'hzzzzzzzz;
	assign busa = a_decode[30] ? q30 : 32'hzzzzzzzz;
	assign busa = a_decode[31] ? q31 : 32'hzzzzzzzz;
	
	assign data_readRegA = busa;

	tri [31:0] busb;
	assign busb = b_decode[0] ? 32'h00000000 : 32'hzzzzzzzz;
	assign busb = b_decode[1] ? q1 : 32'hzzzzzzzz;
	assign busb = b_decode[2] ? q2 : 32'hzzzzzzzz;
	assign busb = b_decode[3] ? q3 : 32'hzzzzzzzz;
	assign busb = b_decode[4] ? q4 : 32'hzzzzzzzz;
	assign busb = b_decode[5] ? q5 : 32'hzzzzzzzz;
	assign busb = b_decode[6] ? q6 : 32'hzzzzzzzz;
	assign busb = b_decode[7] ? q7 : 32'hzzzzzzzz;
	assign busb = b_decode[8] ? q8 : 32'hzzzzzzzz;
	assign busb = b_decode[9] ? q9 : 32'hzzzzzzzz;
	assign busb = b_decode[10] ? q10 : 32'hzzzzzzzz;
	assign busb = b_decode[11] ? q11 : 32'hzzzzzzzz;
	assign busb = b_decode[12] ? q12 : 32'hzzzzzzzz;
	assign busb = b_decode[13] ? q13 : 32'hzzzzzzzz;
	assign busb = b_decode[14] ? q14 : 32'hzzzzzzzz;
	assign busb = b_decode[15] ? q15 : 32'hzzzzzzzz;
	assign busb = b_decode[16] ? q16 : 32'hzzzzzzzz;
	assign busb = b_decode[17] ? q17 : 32'hzzzzzzzz;
	assign busb = b_decode[18] ? q18 : 32'hzzzzzzzz;
	assign busb = b_decode[19] ? q19 : 32'hzzzzzzzz;
	assign busb = b_decode[21] ? q21 : 32'hzzzzzzzz;
	assign busb = b_decode[22] ? q22 : 32'hzzzzzzzz;
	assign busb = b_decode[23] ? q23 : 32'hzzzzzzzz;
	assign busb = b_decode[24] ? q24 : 32'hzzzzzzzz;
	assign busb = b_decode[25] ? q25 : 32'hzzzzzzzz;
	assign busb = b_decode[26] ? q26 : 32'hzzzzzzzz;
	assign busb = b_decode[27] ? q27 : 32'hzzzzzzzz;
	assign busb = b_decode[28] ? q28 : 32'hzzzzzzzz;
	assign busb = b_decode[29] ? q29 : 32'hzzzzzzzz;
	assign busb = b_decode[30] ? q30 : 32'hzzzzzzzz;
	assign busb = b_decode[31] ? q31 : 32'hzzzzzzzz;
	
	assign data_readRegB = busb;
	
endmodule
